
* Spring Boot is an open source Java-based framework used to create a micro Service.

* Micro Service is an architecture that allows the developers to develop and deploy services independently. Each service running has its own process and this achieves the lightweight model to support business applications.

* Spring Boot Starters
Handling dependency management is a difficult task for big projects. Spring Boot resolves this problem by providing a set of dependencies for developers convenience.

For example, if you want to use Spring and JPA for database access, it is sufficient if you include spring-boot-starter-data-jpa dependency in your project.

Note that all Spring Boot starters follow the same naming pattern spring-boot-starter- *, where * indicates that it is a type of the application.

* Auto Configuration
Spring Boot Auto Configuration automatically configures your Spring application based on the JAR dependencies you added in the project. For example, if MySQL database is on your class path, but you have not configured any database connection, then Spring Boot auto configures an in-memory database.

For this purpose, you need to add @EnableAutoConfiguration annotation or @SpringBootApplication annotation to your main class file. Then, your Spring Boot application will be automatically configured.

* Spring Boot Application
The entry point of the Spring Boot Application is the class contains @SpringBootApplication annotation. This class should have the main method to run the Spring Boot application. @SpringBootApplication annotation includes Auto- Configuration, Component Scan, and Spring Boot Configuration.

If you added @SpringBootApplication annotation to the class, you do not need to add the @EnableAutoConfiguration, @ComponentScan and @SpringBootConfiguration annotation. The @SpringBootApplication annotation includes all other annotations.

* Component Scan
Spring Boot application scans all the beans and package declarations when the application initializes. You need to add the @ComponentScan annotation for your class file to scan your components added in your project.

* Dependency Injection Design Pattern
* Loose coupling & Tight Coupling
* Spring Container -- which create object and than inject in our class 
* The moment we start a spring app all objects which have component scan are created in spring container but if we follow @Scope("prototype")
  the object will create when we ask for it.
* spring follow singleton pattern
* Autowired use to search the object in spring container for DI, it search the object by type.
* TO search the object by name use @Qualifier and we need to give name in @Component("obj1")
* Imp https://www.experts-exchange.com/articles/4983/Bind-Variables-in-Oracle-and-Java.html#:~:text=Bind%20variables%20should%20be%20used,to%20be%20executed%20multiple%20times.

* 









  






