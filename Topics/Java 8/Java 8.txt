// for better view use notepad++ , dark theam and JS as language

  Java 8 why ?

* for small and concise code
* introduce functional prgramming --  u can pass the function as an argument
* parallel programming to utilise multiple core of the CPU 


// Feautures

1) Lamda function (anonymous function) -> we have functional interface in java 8 , to give implementtation of any interface there are two ways you can give 
   implement the interface using class or make anonymous class
   
   FunctionalInterfaceDemo demo = new FunctionalInterfaceDemo(
   
   @Override
   int somemethod(int a , int b){
      return a+b;
   }
   
   );

   Lammda function is nothing writing this in more concise way 
  
      FunctionalInterfaceDemo demo =  (a,b)-> a+b;  // saving the function in a variable
	  demo.somemethod(5,5);
	
	
	// Variable use in lamda is final 
	Example:
	
	public void function(){
	
	int a = 2;
	
	()->{
	
	a = 3;  // error cant change value coz it's final 
	       // solution is make variable instance
	
	}
}
	
Benefits: enable functional programming , code reduction, enable parallel processing, elemination of shadow vars 
    

2) Functional interface // an interface that contains exactly one abstract methood , annotate it with @FunctionalInterface can have multiple default and static methods

// Built-in Functional Interfaces (java.util.function)

Java 8 provides commonly used functional interfaces like:

// check project practice on git
Predicate<T> → boolean test(T t) // use to to test condition

Function<T, R> → R apply(T t) // apply some functionality to it and return the output

Consumer<T> → void accept(T t); // only take input dont give output

Supplier<T> → T get(); // supply output , dont take any input

BiFunction, BiConsumer,BiPredicate   // Bisupplier ki kya he jarurat hai bc nahi hota wo
  
3) Stream API -  convert list to stream for better operation
   
   Intermediate operations // filter(), map(),skip(), sorted() ,distinct(), limit() only transforms the stream but lazy
   
   List<String>  filteredNames = names.stream()
                .filter(name -> name.length() > 3) // Intermediate: Filter names with length > 3
                .distinct()                        // Intermediate: Remove duplicates
                .sorted()                          // Intermediate: Sort alphabetically
                .collect(Collectors.toList());     // Terminal: Collect result in a list

   System.out.println(filteredNames);
   
   Terminal Operation ,  // actually start execution
   
   collect(Collectors.toList()) → Collects stream data into a list.

   forEach(Consumer<T>) → Iterates over elements.

   count() → Returns the number of elements.

   reduce(BinaryOperator<T>) → Reduces elements to a single value.

   allMatch(), anyMatch(), noneMatch() → Check conditions.
  

   lazy evaluation,   // actual process start hoti terminal operation k baad
   parallel execution // ek sath multiple threads process karte list
   
//   Advantages of Streams

✅ Concise & Readable - Less boilerplate code
✅ Lazy Evaluation - Processes elements only when needed
✅ Parallel Execution - Uses multiple threads for performance
✅ Functional Approach - No need for external iteration

// from chat gpt

1 // How Streams Work (Step-by-Step)

Stream pipeline consists of three main parts:

1.1. Source (Collection, Array, or I/O)

Streams can be created from:

Collections (List, Set, etc.)

Arrays (Arrays.stream())

I/O Channels (Files.lines())


// Traditional loop vs Stream

// Basic Comparison

//Feature	                  Traditional Loop (for/while)	             Stream API (stream())

Readability	              Verbose (explicit iteration)	             Concise & declarative
Performance	              Faster for small data	                     Efficient with large data (lazy evaluation)
Parallelism	              Manual thread management	                 parallelStream() support
Side Effects	          Prone to modifying external state	         Functional, avoids side effects
Lazy Execution	          Executes immediately	                     Intermediate ops are lazy
Mutability	              Works with mutable structures	             Works best with immutable data 


3) Date and time API  // some modifications

4) Base64 encode and decode

5) method and constructor refrence // you can call method and constructor without invoking it

6) default and static method in interface  

  // method which have body with default keyword in interface can be overridden
  // method which have body with static keyword in interface can not be overridden
  // but why we needed default ,java guyz wanted to update the previous interfaces but as you know you have 
 
 
 
8) Optional class

9) Java IO improvements , Collection API improvements
 


























